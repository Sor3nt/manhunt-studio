import NBinary from "./NBinary.js";
import Event from "./Event.js";
import Status from "./Status.js";
import Loader from "./Plugin/Loader.js";
import Storage from "./Storage.js";
import Studio from "./Studio.js";

export default class FileDrop{

    /**
     *
     * @type {{name: string, binary: NBinary}[]}
     */
    files = [];

    /**
     *
     * @type {Result[]}
     */
    entries = [];
    openRequests = 0;

    // loadedMap = {
    //     model: false,
    //     modelTexture: false,
    //     map: false,
    //     mapTexture: false,
    //     instances1: false,
    //     instances2: false,
    //     glg: false,
    // };


    constructor(id){
        let _this = this;
        //
        // let dropFolder = document.getElementById('dropFolder');
        // dropFolder.addEventListener("change", function (e) {
        //     let files = e.target.files;
        //
        //     for (var i = 0, len = files.length; i < len; i++) {
        //         let file = files[i];
        //
        //         console.log(file);
        //     }
        // }, false);
        //
        // this.wizzardContainer = jQuery('#import');
        //
        // this.wizzardContainer.find('[data-fied="level"]').change(function () {
        //
        //     let level = _this.wizzardContainer.find('[data-fied="level"]').val();
        //     if (level !== "none"){
        //         let entries = Storage.findBy({
        //             level: level
        //         });
        //
        //         if (entries.length !== 0){
        //             // _this.reset();
        //             _this.updateMapByStorage();
        //         }
        //     }
        //
        //
        //     // _this.updateWizzard();
        // });

        // this.wizzardContainer.find('[data-import]').click(function () {
        //     let status = _this.updateWizzard();
        //     if (status){
        //         _this.finish();
        //     }
        // });


        let dropZone = document.getElementById(id);

        dropZone.addEventListener('dragover', function(e) {
            e.stopPropagation();
            e.preventDefault();
            e.dataTransfer.dropEffect = 'copy';
        });

        dropZone.addEventListener('drop', function (e) {
            _this.onDrop(e);
        });
    }

    async getFile(fileEntry) {
        try {
            return await new Promise((resolve, reject) => fileEntry.file(resolve, reject));
        } catch (err) {
            console.log(err);
        }
    }


    async scanFiles(item) {

        let _this = this;

        if (item.isDirectory) {
            let directoryReader = item.createReader();

            directoryReader.readEntries(function(entries) {
                entries.forEach(function(entry) {
                    _this.scanFiles(entry );
                });
            });
        }else{

            let extension = item.name.split(".");
            if (extension.length === 1)
                return; //no extension

            extension = extension[extension.length - 1].toLowerCase();

            //only process known file extensions and ignore export folder generated by MHT
            if (Studio.fileFormats.indexOf(extension) === -1 || item.fullPath.indexOf("#") !== -1 )
                return;

            this.openRequests++;
            this.processFile(await this.getFile(item), item.fullPath)

        }
    }

    onDrop(e){
        // Prevent default behavior (Prevent file from being opened)
        e.preventDefault();

        Status.hideWelcome();

        let items = e.dataTransfer.items;
        for (let i=0; i<items.length; i++) {
            let item = items[i].webkitGetAsEntry();

            if (item) {
                this.scanFiles(item);
            }
        }


        //
        // return;
        //
        // let files = e.dataTransfer.files;
        //
        // this.openRequests = files.length;
        // for(let i in files){
        //     if (!files.hasOwnProperty(i)) continue;
        //     this.processFile(files[i]);
        // }
        //
        // // Prevent default behavior (Prevent file from being opened)
        // e.preventDefault();
    }

    /**
     *
     * @param file {Blob}
     */
    processFile(file, fileNamePath){
        let _this = this;
        let reader = new FileReader();

        /**
         *
         * @param event {Event}
         */
        reader.onload = function(event) {

            let binary = new NBinary(event.target.result);
            _this.files.push({
                name: file.name,
                fileNamePath: fileNamePath,
                binary: binary
            });
            _this.openRequests--;

            if (_this.openRequests === 0){
                _this.allFilesLoaded();
            }
        };

        reader.readAsArrayBuffer(file);

    }

    allFilesLoaded(){
        let _this = this;

        this.files.forEach(function (file) {
            Event.dispatch(Event.DROP_FILE, file);

            file.binary.setCurrent(0);
            let parsed = Loader.parse(file.binary, {});

            parsed.forEach(function (entry) {

                entry.setFilePath(file.fileNamePath);

                _this.entries.push(entry);
            });
        });

        this.files = [];
        this.finish();
    }

    reset(){
        this.entries = [];
    }

    finish(){

        this.entries.forEach(function (entry) {

            Storage.add(entry);

            Event.dispatch(Event.ENTRY_LOADED, {
                entry: entry
            });

        });

        this.reset();
    }
}